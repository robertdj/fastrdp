name: Release Python

on:
  workflow_dispatch:
    inputs:
      # Latest commit to include with the release. If omitted, use the latest commit on the main branch.
      sha:
        description: Commit SHA
        type: string
      # Create the sdist and build the wheels, but do not publish to PyPI / GitHub.
      dry-run:
        description: Dry run
        type: boolean
        default: false

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

jobs:
  create-sdist:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false

    steps:
      - uses: actions/checkout@v5
        with:
          ref: ${{ inputs.sha }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: "0.8.11"

      - name: Create source distribution
        run: uv build --sdist

      - name: Check README rendering for PyPI
        run: |
          uv add twine
          uv run twine check dist/*

      - name: Test sdist
        run: |
          uv add --verbose dist/*.tar.gz
          uv run -- python -c "from fastrdp import rdp"

      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist/*.tar.gz


  build-wheels:
    strategy:
      fail-fast: false
      matrix:
        python_version: ["310", "311", "312", "313"]
        platform: [
          {os: ubuntu-24.04, cibw_archs: x86_64},
          {os: ubuntu-24.04, cibw_archs: aarch64},
          {os: windows-2022, cibw_archs: auto},
          {os: macos-14, cibw_archs: "x86_64 arm64"}
        ]
    runs-on: ${{ matrix.platform.os }}
    env:
      CIBW_SKIP: "*-musllinux_aarch64"
      CIBW_TEST_COMMAND: python -c "from fastrdp import rdp"
      # Apple Silicon machines are not available for testing, so silence the
      # warning from cibuildwheel. Remove the skip when they're available.
      CIBW_TEST_SKIP: "*-macosx_arm64"
      # Get C++17 support on Linux and macOS
      CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
      MACOSX_DEPLOYMENT_TARGET: "11.00"

    steps:
      - uses: actions/checkout@v5
        with:
          ref: ${{ inputs.sha }}

      - name: Set up QEMU
        if: matrix.platform.cibw_archs == 'aarch64'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Build wheels for Python ${{ matrix.python_version }}
        uses: pypa/cibuildwheel@v3.1.3
        env:
          # Only build on CPython. 
          CIBW_BUILD: "cp${{ matrix.python_version }}-*"
          CIBW_ARCHS: ${{ matrix.platform.cibw_archs }}

      - name: Upload wheel
        uses: actions/upload-artifact@v4
        with:
          name: "wheel-python-${{ matrix.python_version }}-${{ matrix.platform.os }}-${{ matrix.platform.cibw_archs }}"
          path: ./wheelhouse/*.whl
          if-no-files-found: error


  publish-to-pypi:
    needs: [create-sdist, build-wheels]
    environment:
      name: PyPI
      url: https://pypi.org/project/fastrdp
    runs-on: ubuntu-latest
    permissions:
      id-token: write

    steps:
      - name: Download sdist
        uses: actions/download-artifact@v5
        with:
          name: sdist
          path: dist

      - name: Download wheels
        uses: actions/download-artifact@v5
        with:
          pattern: wheel-*
          path: dist
          merge-multiple: true

      - name: Publish to PyPI
        if: inputs.dry-run == false
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          verbose: true


  publish-to-github:
    needs: publish-to-pypi
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.sha }}

      - name: Download sdist
        uses: actions/download-artifact@v5
        with:
          name: sdist
          path: dist

      - name: Get version from pyproject.toml
        id: version
        run: |
          VERSION=$(grep -m 1 -oP 'version = "\K[^"]+' pyproject.toml)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create GitHub release
        if: inputs.dry-run == false
        id: github-release
        uses: softprops/action-gh-release@v2
        with:
          name: fastrdp ${{ steps.version.outputs.version }}
          tag_name: v${{ steps.version.outputs.version }}
          files: dist/fastrdp-${{ steps.version.outputs.version }}.tar.gz
          token: ${{ secrets.GITHUB_TOKEN }}
